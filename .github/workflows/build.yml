name: build

on: [workflow_call, workflow_dispatch]

jobs:
  build-winmac:
    strategy:
      fail-fast: false
      matrix:
        include:
          # CPython builds
          - target: x86_64-pc-windows-msvc
            os: windows-2022
            arch: x64
            python-impl: cpython
            python-version: "3.12"
          - target: i686-pc-windows-msvc
            os: windows-2022
            arch: x86
            python-impl: cpython
            python-version: "3.12"
          - target: x86_64-apple-darwin
            os: macos-13
            arch: x64
            python-impl: cpython
            python-version: "3.12"
          - target: aarch64-apple-darwin
            os: macos-13
            arch: x64
            python-impl: cpython
            python-version: "3.12"
          # PyPy builds
          - target: x86_64-pc-windows-msvc
            os: windows-2022
            arch: x64
            python-impl: pypy
            python-version: "3.10"
          - target: x86_64-apple-darwin
            os: macos-13
            arch: x64
            python-impl: pypy
            python-version: "3.10"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install Nightly Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt
  
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          python-implementation: ${{ matrix.python-impl }}
          architecture: ${{ matrix.arch }}

      - name: Install Python packages
        run: pip install -r python/requirements.txt

      - name: Build wheel
        run: make TARGET=${{ matrix.target }} PYTHON_IMPL=${{ matrix.python-impl }}
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: pyxel-${{ matrix.python-impl }}-${{ matrix.target }}
          path: dist/*

  build-linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          # CPython builds
          - target: x86_64-unknown-linux-gnu
            image: messense/manylinux2014-cross:x86_64
            python-impl: cpython
            python-version: "3.12"

          - target: i686-unknown-linux-gnu
            image: messense/manylinux2014-cross:i686
            python-impl: cpython
            python-version: "3.12"

          - target: aarch64-unknown-linux-gnu
            image: messense/manylinux2014-cross:aarch64
            python-impl: cpython
            python-version: "3.12"

          - target: armv7-unknown-linux-gnueabihf
            image: messense/manylinux2014-cross:armv7l
            python-impl: cpython
            python-version: "3.12"

          # PyPy builds
          - target: x86_64-unknown-linux-gnu
            image: messense/manylinux2014-cross:x86_64
            python-impl: pypy
            python-version: "3.10"
          
          - target: armv7-unknown-linux-gnueabihf
            image: messense/manylinux2014-cross:armv7l
            python-impl: pypy
            python-version: "3.10"

    runs-on: ubuntu-22.04
    container: ${{ matrix.image }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install Nightly Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          python-implementation: ${{ matrix.python-impl }}

      - name: Install Python packages
        run: pip install -r python/requirements.txt
      - name: Build and install SDL2
        run: |
          SDL2_VERSION=2.0.10
          export CC=$TARGET_CC
          export AR=$TARGET_AR
          export RANLIB=$TARGET_RANLIB
          curl -sqLO https://github.com/libsdl-org/SDL/releases/download/release-${SDL2_VERSION}/SDL2-${SDL2_VERSION}.tar.gz
          tar xzf SDL2-${SDL2_VERSION}.tar.gz
          cd SDL2-${SDL2_VERSION}
          CFLAGS="-O3 -fPIC" ./configure \
            --build=x86_64-unknown-linux-gnu \
            --host=${{ matrix.target }} \
            --prefix=/usr/${{ matrix.target }}
          make -j4
          make install
          cd ..
          rm -rf SDL2-${SDL2_VERSION}

      - name: Build wheel
        run: |
          export BINDGENFLAGS="-I/usr/${{ matrix.target }}/include/SDL2 -I/usr/${{ matrix.target }}/${{ matrix.target }}/sysroot/usr/include"
          export RUSTFLAGS="-L/usr/${{ matrix.target }}/lib"
          make TARGET=${{ matrix.target }} PYTHON_IMPL=${{ matrix.python-impl }}

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: pyxel-${{ matrix.python-impl }}-${{ matrix.target }}
          path: dist/*
